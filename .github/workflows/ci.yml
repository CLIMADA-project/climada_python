name: ci

on: [push, pull_request]

# Use bash explicitly for being able to enter the conda environment
defaults:
  run:
    shell: bash -l {0}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    permissions:
      # For publishing linter checks and annotations
      checks: write
      contents: write

    steps:
      -
        name: Checkout Repo
        uses: actions/checkout@v3
      # Fetch the date for setting a cache key.
      -
        id: date
        run: |
          echo "TODAY=$(date -Idate)" >> $GITHUB_OUTPUT
      -
        name: Build Python ${{ matrix.python-version }} environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: requirements/env_climada.yml
          cache-env: true
          # Special cache key because we are using a matrix
          # NOTE: The cache will be invalidated if the key changes.
          cache-env-key: ${{ steps.date.outputs.TODAY }}-Python${{ matrix.python-version }}
          channels: conda-forge
          extra-specs: |
            python=${{ matrix.python-version }}
            coverage
            ipython
            nbformat
            make
      -
        name: Run Linter
        if: ${{ matrix.python-version == '3.9' }}
        continue-on-error: true  # Pylint reports as bit-encoded return values
        run: |
          micromamba install -y pylint
          echo Adding matcher: ${{ github.workspace }}/.github/matchers/pylint-warning.json
          echo "Adding matcher: ${{ github.workspace }}/.github/matchers/pylint-warning.json"
          echo "::add-matcher::${{ github.workspace }}/.github/matchers/pylint-warning.json"
          echo "::add-matcher::${{ github.workspace }}/.github/matchers/pylint-error.json"
          pylint -ry climada
      -
        name: Run Unit Tests
        run: |
          make unit_test
      -
        name: Run Data Tests
        run: |
          make data_test
      # -
      #   name: Run Integration Tests
      #   run: |
      #     make integ_test
      # TODO: Maybe run Notebook tests only on specific Python version?
      -
        name: Run Notebook Tests
        run: |
          make notebook_test
      -
        name: Upload Artifacts Python ${{ matrix.python-version }}
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: data-test-report
          path: tests_xml/

  report-test-results:
    if: always()
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      # For publishing results
      checks: write
    steps:
      -
        uses: actions/download-artifact@v3
        with:
          path: tests_xml/
      -
        name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: tests_xml/**/*.xml
          check_name: "Test Results"
          comment_mode: "off"
